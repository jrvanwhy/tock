// Licensed under the Apache License, Version 2.0 or the MIT License.
// SPDX-License-Identifier: Apache-2.0 OR MIT
// Copyright Tock Contributors 2024.
// Copyright Google LLC 2024.

//! Hierarchy of traits implemented by registers generated by the peripheral!
//! macro.

mod array;
mod read;
mod write;

pub use array::{ArrayRead, ArrayRegister, ArrayUnsafeRead, ArrayUnsafeWrite, ArrayWrite};
pub use read::Read;
pub use write::Write;
// TODO: ReadWrite

use crate::{RegisterLongName, UIntLike};

// TODO: Document
pub trait Register: Clone {
    type Value: UIntLike;
}

// TODO: Document
pub trait ReadLongName: Register {
    type LongName: RegisterLongName;
}

// TODO: Document
pub trait WriteLongName: Register {
    type LongName: RegisterLongName;
}

// Design note: Unsafe registers don't necessarily "look" like safe registers --
// it's possible that most unsafe registers are e.g. triggers that start
// operations. Therefore, we don't blindly copy the functionality of the safe
// Read/Write traits. That is why the Unsafe* traits do not currently have
// LongName support. We can expand upon UnsafeRead, UnsafeWrite, and their array
// equivalents when we know more about their use cases.
// TODO: Document
pub trait UnsafeRead: Register {
    /// # Safety
    /// Reading this register has hardware-specific safety requirements which
    /// the caller must comply with.
    unsafe fn read(&self) -> Self::Value;
}

// TODO: Document
pub trait UnsafeWrite: Register {
    /// # Safety
    /// Writing this register has hardware-specific safety requirements which
    /// the caller must comply with.
    unsafe fn write(&self, value: Self::Value);
}
